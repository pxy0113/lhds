{"remainingRequest":"F:\\work\\lhds\\node_modules\\babel-loader\\lib\\index.js!F:\\work\\lhds\\node_modules\\eslint-loader\\index.js??ref--13-0!F:\\work\\lhds\\src\\axios\\index.js","dependencies":[{"path":"F:\\work\\lhds\\src\\axios\\index.js","mtime":1572947244957},{"path":"F:\\work\\lhds\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\work\\lhds\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\work\\lhds\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\n// import Vue from 'vue'\n// \n// \n// import axios from 'axios'\n// \n// Vue.prototype.$http = axios\n\n/*\n* axios配置管理\n*/\nimport Vue from 'vue';\nimport axios from 'axios';\nimport router from \"../router\";\n\nvar qs = require('qs'); //axios自带qs插件\n\n\nimport { transCode } from \"../plugins/code.js\";\nimport vuex from \"../store/state.js\";\nvar vm = new Vue(); //--------------------------------------------全局设置-------------------------------\n// axios.defaults.baseURL = 'http://192.168.2.105:8080'; //配置接口基础地址\n// axios.defaults.baseURL = 'http://m252t77964.wicp.vip:20211';\n\naxios.defaults.baseURL = 'http://web.lhds.vip'; //配置接口基础地址\n\naxios.defaults.timeout = 50000; //响应超时时间\n\naxios.defaults.headers.post['Content-Type'] = 'application/json;charset=utf-8'; // axios.defaults.withCredentials = true; //允许携带cookie,实现跨域登录\t\n//-----------------在发送数据之前进行数据转换 , get不会转换,因为get走的是 parmas属性----------------------\n\naxios.defaults.transformRequest = function (_data) {\n  //第一个参数_data是接收过来的数据\n  // if(typeof(_data) == 'object'){\n  // \t\tlet formData = new FormData(); //使用formData方式发送表单 否则程序接收不到表单变量（formData可以实现文件的异步上传）\n  // \t\n  // \t\tfor(let item in _data) { //for in 遍历数据进行转换\n  // \t\n  // \t\t\tformData.append(item, _data[item]);\n  // \t\n  // \t\t}\t\t\t\n  // \t\tconsole.log('-->发送了数据:', _data);\n  // \t\n  // \t\treturn formData;\n  // }else{\n  // \treturn _data;\n  // }\n  var data = JSON.stringify(_data);\n  console.log('-->发送了数据:', data);\n  return data;\n};\n\nvar CancelToken = axios.CancelToken; //获取axios的取消令牌\n\nvar source = CancelToken.source(); // 正在进行中的请求列表\n\nvar reqList = [];\n/**\n * 阻止重复请求\n * @param {array} reqList - 请求缓存列表\n * @param {string} url - 当前请求地址\n * @param {function} cancel - 请求中断函数\n * @param {string} errorMessage - 请求中断时需要显示的错误信息\n */\n\nvar stopRepeatRequest = function stopRepeatRequest(url, cancel, errorMessage) {\n  //取消重复请求\n  var errorMsg = errorMessage || '';\n\n  for (var i = 0; i < reqList.length; i++) {\n    if (reqList[i] === url) {\n      cancel(errorMsg); //循环每个对象 跟当前url相同 则执行一次cancel(msg)方法\n\n      return;\n    }\n  }\n\n  reqList.push(url);\n  console.log(reqList);\n};\n/**\n * 允许某个请求可以继续进行\n * @param {array} reqList 全部请求列表\n * @param {string} url 请求地址\n */\n\n\nvar allowRequest = function allowRequest(url) {\n  for (var i = 0; i < reqList.length; i++) {\n    if (reqList[i] === url) {\n      reqList.splice(i, 1);\n      console.log(reqList);\n      break;\n    } else {\n      console.log('错了错了');\n    }\n  }\n}; //--------------------添加一个请求拦截器,每次请求都会拦截一次,但是尽量使用全局设置,方便每次使用不同的设置--------------\n\n\naxios.interceptors.request.use(function (_config) {\n  //在请求发出之前对配置进行一些操作\n  var config = _config;\n  config.cancelToken = source.token; // 阻止重复请求。当上个请求未完成时，相同的请求不会进行\n\n  stopRepeatRequest(_config.url, source.cancel, \"\".concat(config.url, \" \\u8BF7\\u6C42\\u88AB\\u4E2D\\u65AD\"));\n\n  if (config.hasToken) {\n    //是否携带token\n    if (sessionStorage.token) {\n      //session如果有token\n      config.headers = Object.assign(config.headers, {\n        'token': sessionStorage.token\n      });\n    }\n  } //如果想每次请求的时候更改配置, 在这里增加config配置项\n  // config.headers.token = 'RtakHgn04eKSsFCr1+RvaN+miAV/vYtG7nwtQhJJpem8eNlFRsTrnNpPXbxRLNhrXJholRU+GQd+177S0DRWhVtnPR4SanNfP1XPV9yuoX9VLLCTnunB+am1bA/UL8DB';\n\n\n  console.log('-->请求了URL(' + _config.method + '):', _config.baseURL + _config.url);\n  return config;\n}, function (_err) {\n  console.log(_err);\n}); //------------------------添加一个响应拦截器----------------------\n\naxios.interceptors.response.use(function (_res) {\n  //在这里对返回的数据进行处理\n  setTimeout(function () {\n    var ss = _res.config.url.split(axios.defaults.baseURL);\n\n    allowRequest(ss[ss.length - 1]);\n  }, 1000);\n  console.log('<--返回了数据', _res);\n\n  if (_res.data.code !== 1) {\n    //请求不成功，报错\n    if (_res.data.code == 20001) {\n      //用户未登录\n      sessionStorage.clear();\n      vuex.showBar = false;\n      router.push({\n        path: '/login'\n      });\n    } else {\n      var msg = transCode(_res.data.code);\n      vuex.errorText.text = msg;\n      vuex.snackbar = true;\n    }\n  }\n\n  return _res.data;\n}, function (_err) {\n  //处理错误\n  var urls = _err.message.split(' ')[0];\n\n  if (axios.isCancel(_err)) {\n    console.log('axios cancel', urls);\n    setTimeout(function () {\n      console.log('我日哦');\n      allowRequest(urls);\n    }, 2000);\n  } else {\n    // 增加延迟，相同请求不得在短时间内重复发送\n    console.log('增加延迟');\n  }\n\n  console.log('>>>>>>发生了ajax错误');\n  console.log('-------------------------------------------');\n\n  if (_err.response) {\n    //请求已经发出，但是服务器响应返回的状态码不在2xx的范围内\t\t\n    // console.log('_err.response',_err.response);\n    console.log('status:', _err.response.status);\n    console.log('statusText:', _err.response.statusText);\n  } else {\n    //一些错误是在设置请求的时候触发\t\t   \n    console.log('请求设置的时候出错了呢');\n  }\n\n  console.log('url:', _err.config.url);\n  console.log('method:', _err.config.method);\n  console.log('data:', _err.config.data);\n  console.log('headers:', _err.config.headers);\n  console.log('-------------------------------------------');\n  return _err;\n}); //get请求\n\nexport var getTestData = function getTestData() {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var fn = arguments.length > 2 ? arguments[2] : undefined;\n  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var errorCallBack = arguments.length > 4 ? arguments[4] : undefined;\n  axios.get(url, data, config).then(function (response) {\n    fn && fn(response);\n  }).catch(function (error) {\n    vuex.showOverLay = false;\n    errorCallBack && errorCallBack(error);\n    console.log('!!!single发生了错误!!!：' + error);\n  });\n};\n/**\n * 异步函数获取axios中的数据\n */\n\nexport var getAsyncAjaxData = function getAsyncAjaxData() {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var errorCallBack = arguments.length > 2 ? arguments[2] : undefined;\n  return new Promise(function (resolve) {\n    axios.post(url, data).then(function (response) {\n      resolve(response);\n    }).catch(function (error) {\n      errorCallBack && errorCallBack(error);\n      console.log('!!!async发生了错误!!!：' + error);\n    });\n  });\n};\n/**\n * axios发起单个请求\n * \n * @param {STRING} url 请求数据的路径\n * @param {JSON} data 需要发送的数据\n * @param {Function} fn 数据响应后的回调函数\n * @param {Object} config 修改默认配置\n */\n\nexport var getAjaxData = function getAjaxData() {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var fn = arguments.length > 2 ? arguments[2] : undefined;\n  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var errorCallBack = arguments.length > 4 ? arguments[4] : undefined;\n  axios.post(url, data, config).then(function (response) {\n    fn && fn(response);\n  }).catch(function (error) {\n    vuex.showOverLay = false;\n    errorCallBack && errorCallBack(error);\n    console.log('!!!single发生了错误!!!：' + error);\n  });\n};\n/**\n * axios同时发起多个请求\n * \n * @param {Array} paramArr 多个请求参数的数组\n * @param {Function(返回的数据1,返回的数据2...)} fn 数据响应后的回调函数\n */\n\nexport var getAllAjaxData = function getAllAjaxData() {\n  var paramArr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var fn = arguments.length > 1 ? arguments[1] : undefined;\n  var newArr = [];\n  paramArr.forEach(function (item) {\n    newArr.push(axios.post(item.url || '', item.data || {}));\n  });\n  axios.all(newArr).then(axios.spread(fn)).catch(function (error) {\n    return console.log('发生了错误：' + error);\n  });\n};\n/**\n * axios同时发起多个请求 跟上述不同的地方在于 这里的回调不拆开 直接返回一组回调\n * 在响应中判断$ax.getSimult(arr, (resArr) =>{\n\t\t\t\tlet length = resArr.length;\n\t\t\t\tlet len = 0;\n\t\t\t\tlet errArr = [];\n\t\t\t\tresArr.forEach((res,i) =>{\n\t\t\t\t\tif(res.code == 0){\n\t\t\t\t\t\tlen++;\n\t\t\t\t\t}else{\n\t\t\t\t\t\terrArr.push(res.msg);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif(len == length){\n\t\t\t\t\tthis.$Message.success('修改成功！');\n * \n * @param {Array} paramArr 多个请求参数的数组\n * @param {Function(返回的数据1,返回的数据2...)} fn 数据响应后的回调函数\n */\n\nexport var getSimult = function getSimult() {\n  var paramArr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var fn = arguments.length > 1 ? arguments[1] : undefined;\n  var newArr = [];\n  paramArr.forEach(function (item) {\n    newArr.push(axios.post(item.url || '', item.data || {}));\n  });\n  axios.all(newArr).then(fn).catch(function (error) {\n    return console.log('发生了错误：' + error);\n  });\n}; //使用qs插件序列化数据\n\nexport var QSStringify = function QSStringify() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var str = '{' + qs.stringify(params, {\n    encoder: function encoder(str) {\n      if (typeof str === 'string' && typeof str !== 'number') {\n        return '\"' + str + '\"';\n      } else {\n        return str;\n      }\n    }\n  }) + '}';\n  var jsonStr = str.replace(/\\=/g, ':').replace(/\\&/g, ',');\n  var jsonData = JSON.parse(jsonStr);\n  return jsonData;\n}; //使用qs插件的Ajax提交数据\n\nexport var getAjaxQsStringify = function getAjaxQsStringify() {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var fn = arguments.length > 2 ? arguments[2] : undefined;\n  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var errorCallBack = arguments.length > 4 ? arguments[4] : undefined;\n  axios.post(url, QSStringify(data), config).then(function (response) {\n    fn && fn(response);\n  }).catch(function (error) {\n    errorCallBack && errorCallBack(error);\n    console.log('!!!发生了错误!!!：' + error);\n  });\n};",{"version":3,"sources":["F:\\work\\lhds\\src\\axios\\index.js"],"names":["Vue","axios","router","qs","require","transCode","vuex","vm","defaults","baseURL","timeout","headers","post","transformRequest","_data","data","JSON","stringify","console","log","CancelToken","source","reqList","stopRepeatRequest","url","cancel","errorMessage","errorMsg","i","length","push","allowRequest","splice","interceptors","request","use","_config","config","cancelToken","token","hasToken","sessionStorage","Object","assign","method","_err","response","_res","setTimeout","ss","split","code","clear","showBar","path","msg","errorText","text","snackbar","urls","message","isCancel","status","statusText","getTestData","fn","errorCallBack","get","then","catch","error","showOverLay","getAsyncAjaxData","Promise","resolve","getAjaxData","getAllAjaxData","paramArr","newArr","forEach","item","all","spread","getSimult","QSStringify","params","str","encoder","jsonStr","replace","jsonData","parse","getAjaxQsStringify"],"mappings":"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","sourcesContent":["// import Vue from 'vue'\n// \n// \n// import axios from 'axios'\n// \n// Vue.prototype.$http = axios\n /*\n * axios配置管理\n */\n\nimport Vue from 'vue'\nimport axios from 'axios';\nimport router from '../router'\nconst qs = require('qs');//axios自带qs插件\nimport {transCode} from '../plugins/code.js'\nimport vuex from '../store/state.js'\nconst vm = new Vue();\n\n//--------------------------------------------全局设置-------------------------------\n\n// axios.defaults.baseURL = 'http://192.168.2.105:8080'; //配置接口基础地址\n// axios.defaults.baseURL = 'http://m252t77964.wicp.vip:20211';\naxios.defaults.baseURL = 'http://web.lhds.vip'; //配置接口基础地址\naxios.defaults.timeout = 50000; //响应超时时间\n\naxios.defaults.headers.post['Content-Type'] = 'application/json;charset=utf-8';\n\n\n// axios.defaults.withCredentials = true; //允许携带cookie,实现跨域登录\t\n\n//-----------------在发送数据之前进行数据转换 , get不会转换,因为get走的是 parmas属性----------------------\n\naxios.defaults.transformRequest = (_data) => { //第一个参数_data是接收过来的数据\n\t// if(typeof(_data) == 'object'){\n\t// \t\tlet formData = new FormData(); //使用formData方式发送表单 否则程序接收不到表单变量（formData可以实现文件的异步上传）\n\t// \t\n\t// \t\tfor(let item in _data) { //for in 遍历数据进行转换\n\t// \t\n\t// \t\t\tformData.append(item, _data[item]);\n\t// \t\n\t// \t\t}\t\t\t\n\t// \t\tconsole.log('-->发送了数据:', _data);\n\t// \t\n\t// \t\treturn formData;\n\t// }else{\n\t// \treturn _data;\n\t// }\r\n\t\r\n\t\tlet data = JSON.stringify(_data);\r\n\t\tconsole.log('-->发送了数据:', data);\r\n\t\treturn data;\n\t\n};\n\r\nconst CancelToken = axios.CancelToken //获取axios的取消令牌\nconst source = CancelToken.source()\n// 正在进行中的请求列表\nlet reqList = []\n\n/**\n * 阻止重复请求\n * @param {array} reqList - 请求缓存列表\n * @param {string} url - 当前请求地址\n * @param {function} cancel - 请求中断函数\n * @param {string} errorMessage - 请求中断时需要显示的错误信息\n */\nconst stopRepeatRequest = function (url, cancel, errorMessage) { //取消重复请求\n  const errorMsg = errorMessage || ''\r\n  \n  for (let i = 0; i < reqList.length; i++) {\n    if (reqList[i] === url) {\n      cancel(errorMsg); //循环每个对象 跟当前url相同 则执行一次cancel(msg)方法\n      return\n    }\n  }\n  reqList.push(url)\r\n  console.log(reqList)\n}\n\n/**\n * 允许某个请求可以继续进行\n * @param {array} reqList 全部请求列表\n * @param {string} url 请求地址\n */\nconst allowRequest = function (url) {\n  for (let i = 0; i < reqList.length; i++) {\n    if(reqList[i]=== url) {\r\n\t\n      reqList.splice(i, 1)\r\n\t  console.log(reqList)\r\n\n      break\n    }else{\r\n\t\tconsole.log('错了错了')\r\n\t}\n  }\n}\n\r\n\n//--------------------添加一个请求拦截器,每次请求都会拦截一次,但是尽量使用全局设置,方便每次使用不同的设置--------------\n\naxios.interceptors.request.use(\n\t\n\t_config => { //在请求发出之前对配置进行一些操作\n\n\t\tlet config = _config;\r\n\t\t\n\t\tconfig.cancelToken = source.token;\r\n\r\n\t\t    // 阻止重复请求。当上个请求未完成时，相同的请求不会进行\r\n\t\t\r\n\t\tstopRepeatRequest(_config.url, source.cancel, `${config.url} 请求被中断`)\r\n\r\n\t\t\n\t\tif(config.hasToken){ //是否携带token\n\t\t\tif(sessionStorage.token){//session如果有token\n\t\t\t\tconfig.headers = Object.assign(config.headers,{'token':sessionStorage.token});\n\t\t\t}\n\t\t}\n\t\t//如果想每次请求的时候更改配置, 在这里增加config配置项\n\t\t// config.headers.token = 'RtakHgn04eKSsFCr1+RvaN+miAV/vYtG7nwtQhJJpem8eNlFRsTrnNpPXbxRLNhrXJholRU+GQd+177S0DRWhVtnPR4SanNfP1XPV9yuoX9VLLCTnunB+am1bA/UL8DB';\n\t\t\n\t\t\n\t\tconsole.log('-->请求了URL(' + _config.method + '):', _config.baseURL + _config.url);\n\t\n\t\treturn config;\n\n\t},\n\t\n\t_err => {\n\t\tconsole.log(_err);\n\t}\n\t\n);\n\n//------------------------添加一个响应拦截器----------------------\r\n\t\t\t\naxios.interceptors.response.use(\n\n\t_res => { //在这里对返回的数据进行处理\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tlet ss = _res.config.url.split(axios.defaults.baseURL);\r\n\r\n\t\t   allowRequest(ss[ss.length-1]);\r\n\t\t   \r\n\t\t}, 1000);\r\n\r\n\t\t\t\n\t\tconsole.log('<--返回了数据', _res);\n\t\t\r\n\t\tif(_res.data.code!==1){//请求不成功，报错\r\n\t\t\tif(_res.data.code ==20001){ //用户未登录\r\n\t\t\t\tsessionStorage.clear();\r\n\t\t\t\tvuex.showBar = false;\r\n\t\t\t\trouter.push({path:'/login'});\r\n\t\t\t}else{\r\n\t\t\t\tlet msg = transCode(_res.data.code);\r\n\t\t\t\tvuex.errorText.text = msg; \r\n\t\t\t\tvuex.snackbar = true;\r\n\t\t\t}\n\n\t\t}\n\n\t\treturn _res.data;\n\n\t},\n\t_err => { //处理错误\r\n\t     let urls = _err.message.split(' ')[0];\n\t\t if (axios.isCancel(_err)) {\r\n\t\t      console.log('axios cancel',urls);\r\n\t\t\t  setTimeout(() => {\r\n\t\t\t\t\t\r\n\t\t\t\tconsole.log('我日哦')\r\n\t\t\t     allowRequest(urls);\r\n\t\t\t     \r\n\t\t\t  }, 2000);\r\n\t\t    } else {\r\n\t\t      // 增加延迟，相同请求不得在短时间内重复发送\r\n\t\t\t  console.log('增加延迟')\r\n\t\t      \r\n\t\t    }\r\n\r\n\t\t\n\t\tconsole.log('>>>>>>发生了ajax错误');\n\n\t\tconsole.log('-------------------------------------------');\n\n\t\tif(_err.response) { //请求已经发出，但是服务器响应返回的状态码不在2xx的范围内\t\t\n\n\t\t\t// console.log('_err.response',_err.response);\n\n\t\t\tconsole.log('status:', _err.response.status);\n\n\t\t\tconsole.log('statusText:', _err.response.statusText);\n\n\t\t} else { //一些错误是在设置请求的时候触发\t\t   \n\t\t\tconsole.log('请求设置的时候出错了呢')\n\t\t}\n\n\t\tconsole.log('url:', _err.config.url);\n\n\t\tconsole.log('method:', _err.config.method);\n\n\t\tconsole.log('data:', _err.config.data);\n\n\t\tconsole.log('headers:', _err.config.headers);\n\n\t\tconsole.log('-------------------------------------------');\n\n\t\treturn _err;\n\t}\n);\n\r\n//get请求\nexport const getTestData = (url = '', data = {}, fn, config = {}, errorCallBack) => {\n\taxios.get(url, data, config).then(response => {\n\t\tfn && fn(response);\n\t}).catch(error => {\n\t\tvuex.showOverLay = false;\n\t\terrorCallBack && errorCallBack(error);\n\t\tconsole.log('!!!single发生了错误!!!：' + error);\n\t});\n}\n\n/**\n * 异步函数获取axios中的数据\n */\nexport const getAsyncAjaxData = (url = '', data = {}, errorCallBack) => {\n\treturn new Promise(resolve => {\n\t\taxios.post(url, data).then(response => {\n\t\t\tresolve(response);\n\t\t}).catch(error => {\n\t\t\terrorCallBack && errorCallBack(error);\n\t\t\tconsole.log('!!!async发生了错误!!!：' + error);\n\t\t});\n\t});\n}\n\n/**\n * axios发起单个请求\n * \n * @param {STRING} url 请求数据的路径\n * @param {JSON} data 需要发送的数据\n * @param {Function} fn 数据响应后的回调函数\n * @param {Object} config 修改默认配置\n */\nexport const getAjaxData = (url = '', data = {}, fn, config = {}, errorCallBack) => {\n\taxios.post(url, data, config).then(response => {\n\t\tfn && fn(response);\n\t}).catch(error => {\n\t\tvuex.showOverLay = false;\n\t\terrorCallBack && errorCallBack(error);\n\t\tconsole.log('!!!single发生了错误!!!：' + error);\n\t});\n}\n\n/**\n * axios同时发起多个请求\n * \n * @param {Array} paramArr 多个请求参数的数组\n * @param {Function(返回的数据1,返回的数据2...)} fn 数据响应后的回调函数\n */\nexport const getAllAjaxData = (paramArr = [], fn) => {\n\tlet newArr = [];\n\tparamArr.forEach(item => {\n\t\tnewArr.push(axios.post(item.url || '',item.data || {}));\n\t});\n\taxios.all(newArr).then(axios.spread(fn)).catch(error => console.log('发生了错误：'+error));\n}\n/**\n * axios同时发起多个请求 跟上述不同的地方在于 这里的回调不拆开 直接返回一组回调\n * 在响应中判断$ax.getSimult(arr, (resArr) =>{\n\t\t\t\tlet length = resArr.length;\n\t\t\t\tlet len = 0;\n\t\t\t\tlet errArr = [];\n\t\t\t\tresArr.forEach((res,i) =>{\n\t\t\t\t\tif(res.code == 0){\n\t\t\t\t\t\tlen++;\n\t\t\t\t\t}else{\n\t\t\t\t\t\terrArr.push(res.msg);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif(len == length){\n\t\t\t\t\tthis.$Message.success('修改成功！');\n * \n * @param {Array} paramArr 多个请求参数的数组\n * @param {Function(返回的数据1,返回的数据2...)} fn 数据响应后的回调函数\n */\nexport const getSimult = (paramArr = [], fn) => {\n\tlet newArr = [];\n\tparamArr.forEach(item => {\n\t\tnewArr.push(axios.post(item.url || '',item.data || {}));\n\t});\n\taxios.all(newArr).then(fn).catch(error => console.log('发生了错误：'+error));\n}\n//使用qs插件序列化数据\nexport const QSStringify = (params={}) => {\n\tlet str = '{'+qs.stringify(params, {encoder: function(str){\n\t\tif(typeof(str) === 'string' && typeof(str) !== 'number'){\n\t\t\treturn '\"'+ str +'\"'\n\t\t}else{\n\t\t\treturn str\n\t\t}\n\t}})+'}';\n\tlet jsonStr = str.replace(/\\=/g, ':').replace(/\\&/g, ',');\n  \tlet jsonData = JSON.parse(jsonStr);\n  \treturn jsonData;\n}\n\n//使用qs插件的Ajax提交数据\nexport const getAjaxQsStringify = (url = '', data = {}, fn, config = {}, errorCallBack) => {\n\taxios.post(url, QSStringify(data), config).then(response => {\n\t\tfn && fn(response);\n\t}).catch(error => {\n\t\terrorCallBack && errorCallBack(error);\n\t\tconsole.log('!!!发生了错误!!!：' + error);\n\t});\n}"]}]}