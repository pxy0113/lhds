{"remainingRequest":"C:\\Users\\pxy\\Downloads\\test\\lhds\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\pxy\\Downloads\\test\\lhds\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pxy\\Downloads\\test\\lhds\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\pxy\\Downloads\\test\\lhds\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\pxy\\Downloads\\test\\lhds\\src\\views\\Dem.1.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\pxy\\Downloads\\test\\lhds\\src\\views\\Dem.1.vue","mtime":1581821930387},{"path":"C:\\Users\\pxy\\Downloads\\test\\lhds\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1572955172692},{"path":"C:\\Users\\pxy\\Downloads\\test\\lhds\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1572955235189},{"path":"C:\\Users\\pxy\\Downloads\\test\\lhds\\node_modules\\babel-loader\\lib\\index.js","mtime":1572955171173},{"path":"C:\\Users\\pxy\\Downloads\\test\\lhds\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1572955172692},{"path":"C:\\Users\\pxy\\Downloads\\test\\lhds\\node_modules\\vue-loader\\lib\\index.js","mtime":1572955240129}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.set\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport _defineProperty from \"C:\\\\Users\\\\pxy\\\\Downloads\\\\test\\\\lhds\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/web.dom.iterable\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Utils from '@/plugins/cryAes.js';\nimport wait from '@/components/other/wait/Wait.vue';\nimport { scrollMixins } from '@/mixins/scroll.js';\nimport { mapActions } from 'vuex';\nexport default {\n  inject: ['theme'],\n  mixins: [scrollMixins],\n  components: {\n    wait: wait\n  },\n  data: function data() {\n    return {\n      runState: [{\n        text: '待启动',\n        color: '#E53935'\n      }, {\n        text: '运行中',\n        color: '#43A047'\n      }, {\n        text: '建仓中',\n        color: 'orange'\n      }, {\n        text: '平仓中',\n        color: 'blue'\n      }, {\n        text: '暂停中',\n        color: '#009688'\n      }],\n      typeArr: ['主', '补'],\n      actionList: [//设置与操作列表\n      {\n        id: 1,\n        text: '设置'\n      }, {\n        id: 2,\n        text: '添加托管'\n      }, {\n        id: 3,\n        text: '全部启动'\n      }, {\n        id: 4,\n        text: '全部停止'\n      }],\n      settingData: {},\n      //传递给设置Dialog的数据\n      usable: false,\n      //可以设置/全启动/新增/全暂停\n      show: false,\n      //添加托管没满足搜索条件\n      tips: '暂无数据',\n      showSetDialog: false,\n      //显示设置对话框\n      transition: 'fade-transition',\n      loading: true,\n      //控制骨架屏 true表示显示\n      accountList: [],\n      //选择账户\n      rulesList: [],\n      //选择规则\n      neighborhoods: [],\n      //已选择的\n      search: '',\n      valid: true,\n      //表格验证\n      currency: [//货币类型\n      {\n        id: 1,\n        value: 'USDT'\n      }, {\n        id: 2,\n        value: 'ETH'\n      }, {\n        id: 3,\n        value: 'BTC'\n      }],\n      condition: {\n        //新增托管-搜索条件\n        currency: '',\n        account: '',\n        rule: ''\n      },\n      addCollocation: false,\n      //添加托管对话框\n      currentRule: null,\n      //当前规则\n      showAddRule: false,\n      //修改规则对话框\n      names2: [],\n      ruleData: [],\n      //货币数据\n      items: [],\n      //托管列表\n      testArr: []\n    };\n  },\n  watch: {\n    'condition.currency': function conditionCurrency(newV, oldV) {\n      if (!this.isEmpty(newV) && !this.isEmpty(this.condition.account)) {\n        this.show = true;\n        this.getExchange();\n      } else {\n        this.show = false;\n        this.ruleData = [];\n      }\n    },\n    'condition.account': function conditionAccount(newV, oldV) {\n      if (!this.isEmpty(newV) && !this.isEmpty(this.condition.currency)) {\n        this.show = true;\n        this.getExchange();\n      } else {\n        this.show = false;\n        this.ruleData = [];\n      }\n    },\n    wssData: {\n      handler: function handler(nV, oV) {\n        if (nV.length == 0 && this.$sock.lookState() == -1) {\n          Object.assign(this.$data, this.$options.data());\n          this.tips = '连接失败,刷新后重试';\n          this.loading = false;\n        }\n\n        this.getMessage();\n      },\n      deep: true\n    },\n    ruleData: function ruleData(nV) {\n      var _this = this;\n\n      this.neighborhoods = [];\n      this.testArr.forEach(function (item) {\n        var idx = nV.indexOf(item);\n\n        if (idx > -1) {\n          _this.neighborhoods.push(idx);\n        }\n      });\n    },\n    showSetDialog: {\n      handler: function handler(nV, oV) {\n        nV && this.afterOpen(); //mixins不允许滚动\n\n        !nV && this.beforeClose();\n      },\n      immediate: true\n    },\n    addCollocation: {\n      handler: function handler(nV, oV) {\n        nV && this.afterOpen(); //mixins不允许滚动\n\n        !nV && this.beforeClose();\n      },\n      immediate: true\n    }\n  },\n  computed: {\n    wssData: function wssData() {\n      //wss传递的消息\n      return this.$store.state.collocationList;\n    }\n  },\n  methods: _objectSpread({}, mapActions(['changeLay']), {\n    toFunction: function toFunction(id) {\n      //点击操作列表的项\n      id == 1 && this.showSetting();\n      id == 2 && this.addColl();\n      id == 3 && this.allStart();\n      id == 4 && this.allEnd();\n    },\n    getExchange: function getExchange() {\n      //获取货币数据\n      this.testArr = [];\n      this.neighborhoods = []; //0216\n\n      this.names2 = ['ETH', 'MKC', 'BCH', 'BACC', 'CAM'];\n      this.ruleData = this.names2; //0216\n\n      var json = {\n        code: 1015,\n        data: {\n          account: this.condition.account,\n          currency: this.condition.currency\n        }\n      };\n      this.$sock.websocketsend(JSON.stringify(json));\n    },\n    closeSetting: function closeSetting(obj) {\n      //设置对话框关闭\n      if (obj.state) {\n        var json = {\n          code: 1014,\n          data: obj.data\n        };\n        this.$sock.websocketsend(JSON.stringify(json));\n      }\n\n      ;\n      this.showSetDialog = false;\n    },\n    showSetting: function showSetting() {\n      //打开设置\n      this.$sock.websocketsend(JSON.stringify({\n        code: 1013\n      }));\n    },\n    addSelect: function addSelect(name, index) {\n      //选中一个交易对\n      var idx = this.neighborhoods.indexOf(index);\n\n      if (idx == -1) {\n        //不存在则添加\n        this.testArr.push(name);\n        this.testArr = Array.from(new Set(this.testArr));\n        this.neighborhoods.push(index);\n        console.log(name, index);\n      } else {\n        var i = this.testArr.indexOf(name);\n\n        if (i > -1) {\n          this.testArr.splice(this.testArr.indexOf(name), 1);\n        }\n\n        this.neighborhoods.splice(idx, 1);\n      }\n    },\n    addColl: function addColl() {\n      var _this2 = this;\n\n      //打开添加托管对话框\n      this.addCollocation = true;\n\n      if (sessionStorage.collocation) {\n        var d = JSON.parse(sessionStorage.collocation);\n        this.accountList = d.accounts;\n        this.rulesList = d.rule;\n\n        if (!this.isEmpty(this.condition.currency) && !this.isEmpty(this.condition.account) && !this.isEmpty(this.condition.rule)) {\n          this.getExchange();\n        }\n      } else {\n        var promiseAll = [this.getApiId(), this.getRuleId()];\n        this.changeLay(true);\n        Promise.all(promiseAll).then(function (results) {\n          _this2.changeLay(false);\n\n          var i = 0;\n          results.forEach(function (item) {\n            if (item.account) {\n              _this2.accountList = item.account;\n              i++;\n            }\n\n            if (item.rule) {\n              _this2.rulesList = item.rule;\n              i++;\n            }\n          });\n\n          if (i == 2) {\n            var sess = {\n              accounts: _this2.accountList,\n              rule: _this2.rulesList\n            };\n            sessionStorage.collocation = JSON.stringify(sess);\n          }\n        });\n      }\n    },\n    getApiId: function getApiId() {\n      //获取账户列表\n      return new Promise(function (resolve) {\n        $ax.getAjaxData('/EasWebUser/getAPIID', {}, function (res) {\n          if (res.code == 1) {\n            resolve({\n              account: res.data\n            });\n          } else {\n            resolve();\n          }\n        }, {\n          hasToken: true\n        });\n      });\n    },\n    getRuleId: function getRuleId() {\n      //获取规则列表\n      return new Promise(function (resolve) {\n        $ax.getAjaxData('/EasWebUser/getRuleID', {}, function (res) {\n          if (res.code == 1) {\n            resolve({\n              rule: res.data\n            });\n          } else {\n            resolve();\n          }\n        }, {\n          hasToken: true\n        });\n      });\n    },\n    closeAddColl: function closeAddColl() {\n      //添加托管对话框-关闭\n      this.addCollocation = false;\n      this.testArr = [];\n      this.neighborhoods = [];\n      this.$refs.form.resetValidation();\n    },\n    debounce: function debounce() {\n      var _this3 = this;\n\n      //节流\n      var t;\n      clearTimeout(this.t);\n      this.t = setTimeout(function () {\n        var that = _this3;\n\n        if (!that.isEmpty(_this3.search)) {\n          var obj = _this3.fuzzyQuery(_this3.search);\n\n          _this3.ruleData = obj;\n          _this3.neighborhoods = []; //0215新增\n        } else {\n          _this3.ruleData = _this3.names2;\n        }\n      }, 500);\n    },\n    fuzzyQuery: function fuzzyQuery(keyWord) {\n      //模糊查询\n      var reg = new RegExp(keyWord);\n      var arr = [];\n      this.names2.forEach(function (item) {\n        if (reg.test(item)) {\n          arr.push(item);\n        }\n      });\n      return arr;\n    },\n    isEmpty: function isEmpty(obj) {\n      //判断字符是否为空的方法\n      if (typeof obj == 'undefined' || obj == null || obj == '' || obj.length > 0 && obj.trim().length == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    cancelSearch: function cancelSearch() {\n      //取消搜索\n      this.search = '';\n      this.ruleData = this.names2;\n      this.neighborhoods = []; //2016\n    },\n    transUpperCase: function transUpperCase(data) {\n      //交易对转大写\n      return data.toUpperCase();\n    },\n    showChip: function showChip(item) {\n      //显示操作面板\n      this.$set(item, 'show', !item.show); //取反\n\n      this.currentRule = item;\n    },\n    onOperation: function onOperation(item) {\n      //改变托管的状态-启动/暂停\n      var send = {\n        data: [{\n          id: item.id\n        }],\n        code: item.isRun == 0 ? 1004 : 1005\n      };\n      this.$sock.websocketsend(JSON.stringify(send));\n    },\n    onPosition: function onPosition(item) {\n      var _this4 = this;\n\n      //平仓/建仓-单个\n      this.$xyDialog({\n        content: item.isBuy == 0 ? '确定建仓吗?' : '确定平仓吗?',\n        onOk: function onOk() {\n          var send = {\n            data: [{\n              id: item.id\n            }],\n            code: item.isBuy == 0 ? 1011 : 1012\n          };\n\n          _this4.$sock.websocketsend(JSON.stringify(send));\n        }\n      });\n    },\n    getColRuleData: function getColRuleData(list) {\n      //托管规则数据\n      var data = list[0].data;\n      this.afterOpen();\n      this.currentRule = JSON.parse(Utils.decrypt(data));\n      this.currentRule.id = list[0].id;\n      this.showAddRule = true;\n    },\n    onRemove: function onRemove(item) {\n      var _this5 = this;\n\n      //删除单个托管\t\t\t\n      this.$xyDialog({\n        title: '删除托管',\n        content: item.isBuy == 1 ? '交易对有持仓,确定要删除吗?' : '确定删除吗?',\n        onOk: function onOk() {\n          var send = {\n            data: [{\n              id: item.id\n            }],\n            code: 1010\n          };\n\n          _this5.$sock.websocketsend(JSON.stringify(send));\n        }\n      });\n    },\n    onEdit: function onEdit(item) {\n      //编辑规则 用某id得到对应的规则 传递给组件\n      var json = JSON.stringify({\n        code: 1016,\n        data: [{\n          id: item.id\n        }]\n      });\n      var state = this.$sock.lookState();\n      this.$sock.websocketsend(json);\n    },\n    hideRule: function hideRule() {\n      //隐藏规则输入框\n      this.showAddRule = false;\n      this.beforeClose();\n    },\n    allEnd: function allEnd() {\n      var _this6 = this;\n\n      //全部停止\n      if (this.items.length > 0) {\n        this.$xyDialog({\n          content: '是否全部停止?',\n          onOk: function onOk() {\n            var json = JSON.stringify({\n              code: 1003\n            });\n\n            _this6.$sock.websocketsend(json);\n          }\n        });\n      }\n    },\n    allStart: function allStart() {\n      var _this7 = this;\n\n      //全部启动\n      if (this.items.length > 0) {\n        this.$xyDialog({\n          content: '是否全部启动?',\n          onOk: function onOk() {\n            var code = JSON.stringify({\n              code: 1002\n            });\n\n            _this7.$sock.websocketsend(code);\n          }\n        });\n      }\n    },\n    addTo: function addTo() {\n      var _this8 = this;\n\n      //添加至托管\n      if (this.$refs.form.validate()) {\n        var arr = [];\n        console.log(this.neighborhoods, this.ruleData, this.names2);\n        this.neighborhoods.forEach(function (item) {\n          var list = Object.assign({}, {\n            symbol: _this8.ruleData[item]\n          }, _this8.condition);\n          arr.push(list);\n        });\n        console.log(arr);\n        var code = JSON.stringify({\n          code: 1009,\n          data: arr\n        });\n        this.$sock.websocketsend(code);\n        this.closeAddColl();\n      }\n    },\n    initData: function initData(item) {\n      //初次收到数据\n      this.items = item;\n\n      if (this.items.length == 0) {\n        this.tips = '暂无数据';\n      }\n    },\n    delData: function delData(obj) {\n      var _this9 = this;\n\n      //删除数据时\n      obj.forEach(function (item) {\n        _this9.items.forEach(function (fil, index) {\n          if (fil.id == item.id) {\n            _this9.items.splice(index, 1);\n          }\n        });\n      });\n\n      if (this.items.length == 0) {\n        this.tips = '暂无数据';\n      }\n    },\n    reLogin: function reLogin() {\n      var _this10 = this;\n\n      this.$xyDialog({\n        content: '用户已经在其他地方登录!',\n        hideCancel: true,\n        onOk: function onOk() {\n          sessionStorage.clear();\n          _this10.$store.state.showBar = false;\n\n          _this10.$router.replace({\n            path: '/login'\n          });\n        }\n      });\n    },\n    addData: function addData(obj) {\n      var _this11 = this;\n\n      //数据新增时\n      this.addCollocation = false;\n      obj.forEach(function (item) {\n        _this11.items.splice(0, 0, item);\n      });\n      console.log('又新增啦');\n    },\n    changeData: function changeData(obj) {\n      var _this12 = this;\n\n      //数据变化时\n      obj.forEach(function (item) {\n        //变化的数组\n        var demo = _this12.items.find(function (fil) {\n          return fil.id == item.id;\n        });\n\n        if (_this12.items.indexOf(demo) > -1) {\n          var newData = Object.assign({}, demo, item);\n\n          _this12.$set(_this12.items, _this12.items.indexOf(demo), newData);\n        }\n      });\n\n      if (this.items.length == 0) {\n        this.tips = '暂无数据';\n      }\n    },\n    getMessage: function getMessage() {\n      //wss传递的消息\n      var result = this.wssData;\n\n      switch (result.code) {\n        case 1000:\n          this.initData(result.data);\n          break;\n\n        case 1001:\n          this.changeData(result.data);\n          break;\n\n        case 1009:\n          this.neighborhoods = []; //取消选中\n\n          this.addData(result.data);\n          break;\n\n        case 1010:\n          this.delData(result.data);\n          break;\n\n        case 1013:\n          //获取设置参数\n          this.settingData = result.data;\n          this.showSetDialog = true;\n          break;\n\n        case 1015:\n          //获取货币数据\n          this.names2 = result.data;\n          this.ruleData = this.names2;\n          break;\n\n        case 1016:\n          //获取托管规则数据\n          this.getColRuleData(result.data);\n          break;\n\n        case 20012:\n          this.items = [];\n          this.usable = false;\n          this.tips = '软件已离线';\n          this.loading = false;\n          this.showSetDialog = false;\n          break;\n\n        case 20011:\n          //重复登录\n          this.reLogin();\n          break;\n\n        case 20013:\n          //客户端在线\n          this.usable = true;\n          this.loading = false;\n          var json = JSON.stringify({\n            code: 1000\n          });\n          this.$sock.websocketsend(json);\n          break;\n\n        default:\n          break;\n      }\n    }\n  }),\n  destroyed: function destroyed() {\n    console.log('销毁');\n    clearTimeout(this.t);\n    this.$sock.close();\n  },\n  mounted: function mounted() {\n    var _this13 = this;\n\n    this.$sock.initWebSocket();\n\n    if (sessionStorage.apiPublic) {\n      this.datas = JSON.parse(sessionStorage.apiPublic);\n    } else {\n      $ax.getTestData('/EasWebUser/getAPIData', {}, function (res) {\n        if (res.code == 1) {\n          sessionStorage.apiPublic = JSON.stringify(res.data);\n          _this13.datas = JSON.parse(sessionStorage.apiPublic);\n        }\n      });\n    }\n  },\n  beforeRouteLeave: function beforeRouteLeave(to, from, next) {\n    //路由离开前断开\n    this.$sock.close();\n    this.$store.state.collocationList = [];\n    next();\n  }\n};",null]}