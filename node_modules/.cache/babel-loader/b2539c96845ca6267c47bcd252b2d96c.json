{"remainingRequest":"F:\\work\\lhds\\node_modules\\thread-loader\\dist\\cjs.js!F:\\work\\lhds\\node_modules\\babel-loader\\lib\\index.js!F:\\work\\lhds\\node_modules\\eslint-loader\\index.js??ref--13-0!F:\\work\\lhds\\src\\axios\\index.js","dependencies":[{"path":"F:\\work\\lhds\\src\\axios\\index.js","mtime":1573809215456},{"path":"F:\\work\\lhds\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\work\\lhds\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\work\\lhds\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\work\\lhds\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.replace\";\n// import Vue from 'vue'\n// \n// \n// import axios from 'axios'\n// \n// Vue.prototype.$http = axios\n\n/*\r\n* axios配置管理\r\n*/\nimport Vue from 'vue';\nimport axios from 'axios';\nimport router from \"../router\";\n\nvar qs = require('qs'); //axios自带qs插件\n\n\nimport { transCode } from \"../plugins/code.js\";\nimport vuex from \"../store/state.js\";\nvar vm = new Vue(); //--------------------------------------------全局设置-------------------------------\n// axios.defaults.baseURL = 'http://192.168.2.105:8080'; //配置接口基础地址\n// axios.defaults.baseURL = 'http://m252t77964.wicp.vip:20211';\n\naxios.defaults.baseURL = 'http://web.lhds.vip'; //配置接口基础地址\n\naxios.defaults.timeout = 50000; //响应超时时间\n\naxios.defaults.headers.post['Content-Type'] = 'application/json;charset=utf-8'; // axios.defaults.withCredentials = true; //允许携带cookie,实现跨域登录\t\n//-----------------在发送数据之前进行数据转换 , get不会转换,因为get走的是 parmas属性----------------------\n\naxios.defaults.transformRequest = function (_data) {\n  //第一个参数_data是接收过来的数据\n  // if(typeof(_data) == 'object'){\n  // \t\tlet formData = new FormData(); //使用formData方式发送表单 否则程序接收不到表单变量（formData可以实现文件的异步上传）\n  // \t\n  // \t\tfor(let item in _data) { //for in 遍历数据进行转换\n  // \t\n  // \t\t\tformData.append(item, _data[item]);\n  // \t\n  // \t\t}\t\t\t\n  // \t\tconsole.log('-->发送了数据:', _data);\n  // \t\n  // \t\treturn formData;\n  // }else{\n  // \treturn _data;\n  // }\n  var data = JSON.stringify(_data);\n  console.log('-->发送了数据:', data);\n  return data;\n}; //--------------------添加一个请求拦截器,每次请求都会拦截一次,但是尽量使用全局设置,方便每次使用不同的设置--------------\n\n\naxios.interceptors.request.use(function (_config) {\n  //在请求发出之前对配置进行一些操作\n  var config = _config;\n\n  if (config.hasToken) {\n    //是否携带token\n    if (sessionStorage.token) {\n      //session如果有token\n      config.headers = Object.assign(config.headers, {\n        'token': sessionStorage.token\n      });\n    }\n  } //如果想每次请求的时候更改配置, 在这里增加config配置项\n  // config.headers.token = 'RtakHgn04eKSsFCr1+RvaN+miAV/vYtG7nwtQhJJpem8eNlFRsTrnNpPXbxRLNhrXJholRU+GQd+177S0DRWhVtnPR4SanNfP1XPV9yuoX9VLLCTnunB+am1bA/UL8DB';\n\n\n  console.log('-->请求了URL(' + _config.method + '):', _config.baseURL + _config.url);\n  return config;\n}, function (_err) {\n  console.log('请求拦截器报错');\n}); //------------------------添加一个响应拦截器----------------------\n\naxios.interceptors.response.use(function (_res) {\n  //在这里对返回的数据进行处理\n  console.log('<--返回了数据', _res);\n\n  if (_res.data.code !== 1) {\n    //请求不成功，报错\n    if (_res.data.code == 20001) {\n      //用户未登录\n      sessionStorage.clear();\n      vuex.showBar = false;\n      router.replace({\n        path: '/login'\n      });\n    } else {\n      var msg = transCode(_res.data.code);\n      vuex.errorText.text = msg;\n      vuex.errorText.type = 'error';\n      vuex.snackbar = true;\n    }\n  }\n\n  return _res.data;\n}, function (_err) {\n  //处理错误\n  console.log('>>>>>>发生了ajax错误');\n  console.log('-------------------------------------------');\n\n  if (_err.response) {\n    //请求已经发出，但是服务器响应返回的状态码不在2xx的范围内\t\t\n    console.log('status:', _err.response.status);\n    console.log('statusText:', _err.response.statusText);\n  } else {\n    //一些错误是在设置请求的时候触发\t\t   \n    console.log('设置的时候触发了错误');\n  }\n\n  console.log('url:', _err.config.url);\n  console.log('method:', _err.config.method);\n  console.log('data:', _err.config.data);\n  console.log('headers:', _err.config.headers);\n  console.log('-------------------------------------------');\n  return _err;\n}); //get请求\n\nexport var getTestData = function getTestData() {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var fn = arguments.length > 2 ? arguments[2] : undefined;\n  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var errorCallBack = arguments.length > 4 ? arguments[4] : undefined;\n  axios.get(url, data, config).then(function (response) {\n    fn && fn(response);\n  }).catch(function (error) {\n    vuex.showOverLay = false;\n    errorCallBack && errorCallBack(error);\n    console.log('!!!getTestData发生了错误!!!：' + error);\n  });\n};\n/**\r\n * 异步函数获取axios中的数据\r\n */\n\nexport var getAsyncAjaxData = function getAsyncAjaxData() {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var errorCallBack = arguments.length > 2 ? arguments[2] : undefined;\n  return new Promise(function (resolve) {\n    axios.post(url, data).then(function (response) {\n      resolve(response);\n    }).catch(function (error) {\n      errorCallBack && errorCallBack(error);\n      console.log('!!!async发生了错误!!!：' + error);\n    });\n  });\n};\n/**\r\n * axios发起单个请求\r\n * \r\n * @param {STRING} url 请求数据的路径\r\n * @param {JSON} data 需要发送的数据\r\n * @param {Function} fn 数据响应后的回调函数\r\n * @param {Object} config 修改默认配置\r\n */\n\nexport var getAjaxData = function getAjaxData() {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var fn = arguments.length > 2 ? arguments[2] : undefined;\n  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var errorCallBack = arguments.length > 4 ? arguments[4] : undefined;\n  axios.post(url, data, config).then(function (response) {\n    fn && fn(response);\n  }).catch(function (error) {\n    vuex.showOverLay = false;\n    errorCallBack && errorCallBack(error);\n    console.log('!!!single发生了错误!!!：' + error);\n  });\n};\n/**\r\n * axios同时发起多个请求\r\n * \r\n * @param {Array} paramArr 多个请求参数的数组\r\n * @param {Function(返回的数据1,返回的数据2...)} fn 数据响应后的回调函数\r\n */\n\nexport var getAllAjaxData = function getAllAjaxData() {\n  var paramArr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var fn = arguments.length > 1 ? arguments[1] : undefined;\n  var newArr = [];\n  paramArr.forEach(function (item) {\n    newArr.push(axios.post(item.url || '', item.data || {}));\n  });\n  axios.all(newArr).then(axios.spread(fn)).catch(function (error) {\n    return console.log('发生了错误：' + error);\n  });\n};\n/**\r\n * axios同时发起多个请求 跟上述不同的地方在于 这里的回调不拆开 直接返回一组回调\r\n * 在响应中判断$ax.getSimult(arr, (resArr) =>{\r\n\t\t\t\tlet length = resArr.length;\r\n\t\t\t\tlet len = 0;\r\n\t\t\t\tlet errArr = [];\r\n\t\t\t\tresArr.forEach((res,i) =>{\r\n\t\t\t\t\tif(res.code == 0){\r\n\t\t\t\t\t\tlen++;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\terrArr.push(res.msg);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tif(len == length){\r\n\t\t\t\t\tthis.$Message.success('修改成功！');\r\n * \r\n * @param {Array} paramArr 多个请求参数的数组\r\n * @param {Function(返回的数据1,返回的数据2...)} fn 数据响应后的回调函数\r\n */\n\nexport var getSimult = function getSimult() {\n  var paramArr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var fn = arguments.length > 1 ? arguments[1] : undefined;\n  var newArr = [];\n  paramArr.forEach(function (item) {\n    newArr.push(axios.post(item.url || '', item.data || {}));\n  });\n  axios.all(newArr).then(fn).catch(function (error) {\n    return console.log('发生了错误：' + error);\n  });\n}; //使用qs插件序列化数据\n\nexport var QSStringify = function QSStringify() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var str = '{' + qs.stringify(params, {\n    encoder: function encoder(str) {\n      if (typeof str === 'string' && typeof str !== 'number') {\n        return '\"' + str + '\"';\n      } else {\n        return str;\n      }\n    }\n  }) + '}';\n  var jsonStr = str.replace(/\\=/g, ':').replace(/\\&/g, ',');\n  var jsonData = JSON.parse(jsonStr);\n  return jsonData;\n}; //使用qs插件的Ajax提交数据\n\nexport var getAjaxQsStringify = function getAjaxQsStringify() {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var fn = arguments.length > 2 ? arguments[2] : undefined;\n  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var errorCallBack = arguments.length > 4 ? arguments[4] : undefined;\n  axios.post(url, QSStringify(data), config).then(function (response) {\n    fn && fn(response);\n  }).catch(function (error) {\n    errorCallBack && errorCallBack(error);\n    console.log('!!!发生了错误!!!：' + error);\n  });\n};",null]}