{"remainingRequest":"F:\\work\\lhds\\node_modules\\thread-loader\\dist\\cjs.js!F:\\work\\lhds\\node_modules\\babel-loader\\lib\\index.js!F:\\work\\lhds\\node_modules\\eslint-loader\\index.js??ref--13-0!F:\\work\\lhds\\src\\axios\\index.js","dependencies":[{"path":"F:\\work\\lhds\\src\\axios\\index.js","mtime":1572340570683},{"path":"F:\\work\\lhds\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\work\\lhds\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\work\\lhds\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\work\\lhds\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/web.dom.iterable\";\n// import Vue from 'vue'\n// \n// \n// import axios from 'axios'\n// \n// Vue.prototype.$http = axios\n\n/*\n* axios配置管理\n*/\nimport Vue from 'vue';\nimport axios from 'axios';\nimport router from \"../router\";\n\nvar qs = require('qs'); //axios自带qs插件\n\n\nimport { transCode } from \"../plugins/code.js\";\nimport vuex from \"../store/state.js\";\nvar vm = new Vue(); //--------------------------------------------全局设置-------------------------------\n\naxios.defaults.baseURL = 'http://192.168.2.103:8080'; //配置接口基础地址\n// axios.defaults.baseURL = 'http://m252t77964.wicp.vip:20211';\n// axios.defaults.baseURL = 'http://web.lhds.vip'; //配置接口基础地址\n\naxios.defaults.timeout = 50000; //响应超时时间\n\naxios.defaults.headers.post['Content-Type'] = 'application/json;charset=utf-8'; // axios.defaults.withCredentials = true; //允许携带cookie,实现跨域登录\t\n//-----------------在发送数据之前进行数据转换 , get不会转换,因为get走的是 parmas属性----------------------\n\naxios.defaults.transformRequest = function (_data) {\n  //第一个参数_data是接收过来的数据\n  //骚操作  绝对有bug\n  // if(typeof(_data) == 'object'){\n  // \t\tlet formData = new FormData(); //使用formData方式发送表单 否则程序接收不到表单变量（formData可以实现文件的异步上传）\n  // \t\n  // \t\tfor(let item in _data) { //for in 遍历数据进行转换\n  // \t\n  // \t\t\tformData.append(item, _data[item]);\n  // \t\n  // \t\t}\t\t\t\n  // \t\tconsole.log('-->发送了数据:', _data);\n  // \t\n  // \t\treturn formData;\n  // }else{\n  // \treturn _data;\n  // }\n  var data = JSON.stringify(_data);\n  console.log('-->发送了数据:', data);\n  return data;\n}; //--------------------添加一个请求拦截器,每次请求都会拦截一次,但是尽量使用全局设置,方便每次使用不同的设置--------------\n\n\naxios.interceptors.request.use(function (_config) {\n  //在请求发出之前对配置进行一些操作\n  var config = _config;\n\n  if (config.hasToken) {\n    //是否携带token\n    if (sessionStorage.token) {\n      //session如果有token\n      config.headers = Object.assign(config.headers, {\n        'token': sessionStorage.token\n      });\n    }\n  } //如果想每次请求的时候更改配置, 在这里增加config配置项\n  // config.headers.token = 'RtakHgn04eKSsFCr1+RvaN+miAV/vYtG7nwtQhJJpem8eNlFRsTrnNpPXbxRLNhrXJholRU+GQd+177S0DRWhVtnPR4SanNfP1XPV9yuoX9VLLCTnunB+am1bA/UL8DB';\n\n\n  console.log('-->请求了URL(' + _config.method + '):', _config.baseURL + _config.url);\n  return config;\n}, function (_err) {\n  console.log(_err);\n}); //------------------------添加一个响应拦截器----------------------\n\naxios.interceptors.response.use(function (_res) {\n  //在这里对返回的数据进行处理\n  console.log('<--返回了数据', _res);\n\n  if (_res.data.code !== 1) {\n    //请求不成功，报错\n    var msg = transCode(_res.data.code);\n    vuex.errorText.text = msg;\n    vuex.snackbar = true;\n  }\n\n  if (_res.data.code == 20001) {\n    //用户未登录\n    sessionStorage.clear();\n    vuex.showBar = false;\n    router.push({\n      path: '/login'\n    });\n  }\n\n  return _res.data;\n}, function (_err) {\n  //处理错误\n  console.log('>>>>>>发生了ajax错误');\n  console.log('-------------------------------------------');\n\n  if (_err.response) {\n    //请求已经发出，但是服务器响应返回的状态码不在2xx的范围内\t\t\n    // console.log('_err.response',_err.response);\n    console.log('status:', _err.response.status);\n    console.log('statusText:', _err.response.statusText);\n  } else {//一些错误是在设置请求的时候触发\t\t   \n  }\n\n  console.log('url:', _err.config.url);\n  console.log('method:', _err.config.method);\n  console.log('data:', _err.config.data);\n  console.log('headers:', _err.config.headers);\n  console.log('-------------------------------------------');\n  return _err;\n});\nexport var getTestData = function getTestData() {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var fn = arguments.length > 2 ? arguments[2] : undefined;\n  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var errorCallBack = arguments.length > 4 ? arguments[4] : undefined;\n  axios.get(url, data, config).then(function (response) {\n    fn && fn(response);\n  }).catch(function (error) {\n    vuex.showOverLay = false;\n    errorCallBack && errorCallBack(error);\n    console.log('!!!single发生了错误!!!：' + error);\n  });\n};\n/**\n * 异步函数获取axios中的数据\n */\n\nexport var getAsyncAjaxData = function getAsyncAjaxData() {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var errorCallBack = arguments.length > 2 ? arguments[2] : undefined;\n  return new Promise(function (resolve) {\n    axios.post(url, data).then(function (response) {\n      resolve(response);\n    }).catch(function (error) {\n      errorCallBack && errorCallBack(error);\n      console.log('!!!async发生了错误!!!：' + error);\n    });\n  });\n};\n/**\n * axios发起单个请求\n * \n * @param {STRING} url 请求数据的路径\n * @param {JSON} data 需要发送的数据\n * @param {Function} fn 数据响应后的回调函数\n * @param {Object} config 修改默认配置\n */\n\nexport var getAjaxData = function getAjaxData() {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var fn = arguments.length > 2 ? arguments[2] : undefined;\n  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var errorCallBack = arguments.length > 4 ? arguments[4] : undefined;\n  axios.post(url, data, config).then(function (response) {\n    fn && fn(response);\n  }).catch(function (error) {\n    vuex.showOverLay = false;\n    errorCallBack && errorCallBack(error);\n    console.log('!!!single发生了错误!!!：' + error);\n  });\n};\n/**\n * axios同时发起多个请求\n * \n * @param {Array} paramArr 多个请求参数的数组\n * @param {Function(返回的数据1,返回的数据2...)} fn 数据响应后的回调函数\n */\n\nexport var getAllAjaxData = function getAllAjaxData() {\n  var paramArr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var fn = arguments.length > 1 ? arguments[1] : undefined;\n  var newArr = [];\n  paramArr.forEach(function (item) {\n    newArr.push(axios.post(item.url || '', item.data || {}));\n  });\n  axios.all(newArr).then(axios.spread(fn)).catch(function (error) {\n    return console.log('发生了错误：' + error);\n  });\n};\n/**\n * axios同时发起多个请求 跟上述不同的地方在于 这里的回调不拆开 直接返回一组回调\n * 在响应中判断$ax.getSimult(arr, (resArr) =>{\n\t\t\t\tlet length = resArr.length;\n\t\t\t\tlet len = 0;\n\t\t\t\tlet errArr = [];\n\t\t\t\tresArr.forEach((res,i) =>{\n\t\t\t\t\tif(res.code == 0){\n\t\t\t\t\t\tlen++;\n\t\t\t\t\t}else{\n\t\t\t\t\t\terrArr.push(res.msg);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif(len == length){\n\t\t\t\t\tthis.$Message.success('修改成功！');\n * \n * @param {Array} paramArr 多个请求参数的数组\n * @param {Function(返回的数据1,返回的数据2...)} fn 数据响应后的回调函数\n */\n\nexport var getSimult = function getSimult() {\n  var paramArr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var fn = arguments.length > 1 ? arguments[1] : undefined;\n  var newArr = [];\n  paramArr.forEach(function (item) {\n    newArr.push(axios.post(item.url || '', item.data || {}));\n  });\n  axios.all(newArr).then(fn).catch(function (error) {\n    return console.log('发生了错误：' + error);\n  });\n}; //使用qs插件序列化数据\n\nexport var QSStringify = function QSStringify() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var str = '{' + qs.stringify(params, {\n    encoder: function encoder(str) {\n      if (typeof str === 'string' && typeof str !== 'number') {\n        return '\"' + str + '\"';\n      } else {\n        return str;\n      }\n    }\n  }) + '}';\n  var jsonStr = str.replace(/\\=/g, ':').replace(/\\&/g, ',');\n  var jsonData = JSON.parse(jsonStr);\n  return jsonData;\n}; //使用qs插件的Ajax提交数据\n\nexport var getAjaxQsStringify = function getAjaxQsStringify() {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var fn = arguments.length > 2 ? arguments[2] : undefined;\n  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var errorCallBack = arguments.length > 4 ? arguments[4] : undefined;\n  axios.post(url, QSStringify(data), config).then(function (response) {\n    fn && fn(response);\n  }).catch(function (error) {\n    errorCallBack && errorCallBack(error);\n    console.log('!!!发生了错误!!!：' + error);\n  });\n};",{"version":3,"sources":["F:\\work\\lhds\\src\\axios\\index.js"],"names":["Vue","axios","router","qs","require","transCode","vuex","vm","defaults","baseURL","timeout","headers","post","transformRequest","_data","data","JSON","stringify","console","log","interceptors","request","use","_config","config","hasToken","sessionStorage","token","Object","assign","method","url","_err","response","_res","code","msg","errorText","text","snackbar","clear","showBar","push","path","status","statusText","getTestData","fn","errorCallBack","get","then","catch","error","showOverLay","getAsyncAjaxData","Promise","resolve","getAjaxData","getAllAjaxData","paramArr","newArr","forEach","item","all","spread","getSimult","QSStringify","params","str","encoder","jsonStr","replace","jsonData","parse","getAjaxQsStringify"],"mappings":"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","sourcesContent":["// import Vue from 'vue'\n// \n// \n// import axios from 'axios'\n// \n// Vue.prototype.$http = axios\n /*\n * axios配置管理\n */\n\nimport Vue from 'vue'\nimport axios from 'axios';\nimport router from '../router'\nconst qs = require('qs');//axios自带qs插件\nimport {transCode} from '../plugins/code.js'\nimport vuex from '../store/state.js'\nconst vm = new Vue();\n\n//--------------------------------------------全局设置-------------------------------\n\naxios.defaults.baseURL = 'http://192.168.2.103:8080'; //配置接口基础地址\n// axios.defaults.baseURL = 'http://m252t77964.wicp.vip:20211';\n// axios.defaults.baseURL = 'http://web.lhds.vip'; //配置接口基础地址\naxios.defaults.timeout = 50000; //响应超时时间\n\naxios.defaults.headers.post['Content-Type'] = 'application/json;charset=utf-8';\n\n\n// axios.defaults.withCredentials = true; //允许携带cookie,实现跨域登录\t\n\n//-----------------在发送数据之前进行数据转换 , get不会转换,因为get走的是 parmas属性----------------------\n\naxios.defaults.transformRequest = (_data) => { //第一个参数_data是接收过来的数据\n\t//骚操作  绝对有bug\n\t// if(typeof(_data) == 'object'){\n\t// \t\tlet formData = new FormData(); //使用formData方式发送表单 否则程序接收不到表单变量（formData可以实现文件的异步上传）\n\t// \t\n\t// \t\tfor(let item in _data) { //for in 遍历数据进行转换\n\t// \t\n\t// \t\t\tformData.append(item, _data[item]);\n\t// \t\n\t// \t\t}\t\t\t\n\t// \t\tconsole.log('-->发送了数据:', _data);\n\t// \t\n\t// \t\treturn formData;\n\t// }else{\n\t// \treturn _data;\n\t// }\n\t\tlet data = JSON.stringify(_data);\n\t\tconsole.log('-->发送了数据:', data);\n\t\treturn data;\n\t\n};\n\n//--------------------添加一个请求拦截器,每次请求都会拦截一次,但是尽量使用全局设置,方便每次使用不同的设置--------------\n\naxios.interceptors.request.use(\n\t\n\t_config => { //在请求发出之前对配置进行一些操作\n\n\t\tlet config = _config;\n\t\t\n\t\tif(config.hasToken){ //是否携带token\n\t\t\tif(sessionStorage.token){//session如果有token\n\t\t\t\tconfig.headers = Object.assign(config.headers,{'token':sessionStorage.token});\n\t\t\t}\n\t\t}\n\t\t//如果想每次请求的时候更改配置, 在这里增加config配置项\n\t\t// config.headers.token = 'RtakHgn04eKSsFCr1+RvaN+miAV/vYtG7nwtQhJJpem8eNlFRsTrnNpPXbxRLNhrXJholRU+GQd+177S0DRWhVtnPR4SanNfP1XPV9yuoX9VLLCTnunB+am1bA/UL8DB';\n\t\t\n\t\t\n\t\tconsole.log('-->请求了URL(' + _config.method + '):', _config.baseURL + _config.url);\n\t\n\t\treturn config;\n\n\t},\n\t\n\t_err => {\n\t\tconsole.log(_err);\n\t}\n\t\n);\n\n//------------------------添加一个响应拦截器----------------------\n\naxios.interceptors.response.use(\n\n\t_res => { //在这里对返回的数据进行处理\n\t\tconsole.log('<--返回了数据', _res);\n\t\t\n\t\tif(_res.data.code!==1){//请求不成功，报错\n\t\t\tlet msg = transCode(_res.data.code);\n\t\t\tvuex.errorText.text = msg; \n\t\t\tvuex.snackbar = true;\n\t\t\t\n\t\t}\n\n\t\tif(_res.data.code ==20001){ //用户未登录\n\t\t\tsessionStorage.clear();\n\t\t\tvuex.showBar = false;\n\t\t\trouter.push({path:'/login'});\n\t\t}\n\n\t\treturn _res.data;\n\n\t},\n\t\n\t_err => { //处理错误\n\n\t\tconsole.log('>>>>>>发生了ajax错误');\n\n\t\tconsole.log('-------------------------------------------');\n\n\t\tif(_err.response) { //请求已经发出，但是服务器响应返回的状态码不在2xx的范围内\t\t\n\n\t\t\t// console.log('_err.response',_err.response);\n\n\t\t\tconsole.log('status:', _err.response.status);\n\n\t\t\tconsole.log('statusText:', _err.response.statusText);\n\n\t\t} else { //一些错误是在设置请求的时候触发\t\t   \n\t\t\t\n\t\t}\n\n\t\tconsole.log('url:', _err.config.url);\n\n\t\tconsole.log('method:', _err.config.method);\n\n\t\tconsole.log('data:', _err.config.data);\n\n\t\tconsole.log('headers:', _err.config.headers);\n\n\t\tconsole.log('-------------------------------------------');\n\n\t\treturn _err;\n\n\t}\n);\n\nexport const getTestData = (url = '', data = {}, fn, config = {}, errorCallBack) => {\n\taxios.get(url, data, config).then(response => {\n\t\tfn && fn(response);\n\t}).catch(error => {\n\t\tvuex.showOverLay = false;\n\t\terrorCallBack && errorCallBack(error);\n\t\tconsole.log('!!!single发生了错误!!!：' + error);\n\t});\n}\n\n/**\n * 异步函数获取axios中的数据\n */\nexport const getAsyncAjaxData = (url = '', data = {}, errorCallBack) => {\n\treturn new Promise(resolve => {\n\t\taxios.post(url, data).then(response => {\n\t\t\tresolve(response);\n\t\t}).catch(error => {\n\t\t\terrorCallBack && errorCallBack(error);\n\t\t\tconsole.log('!!!async发生了错误!!!：' + error);\n\t\t});\n\t});\n}\n\n/**\n * axios发起单个请求\n * \n * @param {STRING} url 请求数据的路径\n * @param {JSON} data 需要发送的数据\n * @param {Function} fn 数据响应后的回调函数\n * @param {Object} config 修改默认配置\n */\nexport const getAjaxData = (url = '', data = {}, fn, config = {}, errorCallBack) => {\n\taxios.post(url, data, config).then(response => {\n\t\tfn && fn(response);\n\t}).catch(error => {\n\t\tvuex.showOverLay = false;\n\t\terrorCallBack && errorCallBack(error);\n\t\tconsole.log('!!!single发生了错误!!!：' + error);\n\t});\n}\n\n/**\n * axios同时发起多个请求\n * \n * @param {Array} paramArr 多个请求参数的数组\n * @param {Function(返回的数据1,返回的数据2...)} fn 数据响应后的回调函数\n */\nexport const getAllAjaxData = (paramArr = [], fn) => {\n\tlet newArr = [];\n\tparamArr.forEach(item => {\n\t\tnewArr.push(axios.post(item.url || '',item.data || {}));\n\t});\n\taxios.all(newArr).then(axios.spread(fn)).catch(error => console.log('发生了错误：'+error));\n}\n/**\n * axios同时发起多个请求 跟上述不同的地方在于 这里的回调不拆开 直接返回一组回调\n * 在响应中判断$ax.getSimult(arr, (resArr) =>{\n\t\t\t\tlet length = resArr.length;\n\t\t\t\tlet len = 0;\n\t\t\t\tlet errArr = [];\n\t\t\t\tresArr.forEach((res,i) =>{\n\t\t\t\t\tif(res.code == 0){\n\t\t\t\t\t\tlen++;\n\t\t\t\t\t}else{\n\t\t\t\t\t\terrArr.push(res.msg);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif(len == length){\n\t\t\t\t\tthis.$Message.success('修改成功！');\n * \n * @param {Array} paramArr 多个请求参数的数组\n * @param {Function(返回的数据1,返回的数据2...)} fn 数据响应后的回调函数\n */\nexport const getSimult = (paramArr = [], fn) => {\n\tlet newArr = [];\n\tparamArr.forEach(item => {\n\t\tnewArr.push(axios.post(item.url || '',item.data || {}));\n\t});\n\taxios.all(newArr).then(fn).catch(error => console.log('发生了错误：'+error));\n}\n//使用qs插件序列化数据\nexport const QSStringify = (params={}) => {\n\tlet str = '{'+qs.stringify(params, {encoder: function(str){\n\t\tif(typeof(str) === 'string' && typeof(str) !== 'number'){\n\t\t\treturn '\"'+ str +'\"'\n\t\t}else{\n\t\t\treturn str\n\t\t}\n\t}})+'}';\n\tlet jsonStr = str.replace(/\\=/g, ':').replace(/\\&/g, ',');\n  \tlet jsonData = JSON.parse(jsonStr);\n  \treturn jsonData;\n}\n\n//使用qs插件的Ajax提交数据\nexport const getAjaxQsStringify = (url = '', data = {}, fn, config = {}, errorCallBack) => {\n\taxios.post(url, QSStringify(data), config).then(response => {\n\t\tfn && fn(response);\n\t}).catch(error => {\n\t\terrorCallBack && errorCallBack(error);\n\t\tconsole.log('!!!发生了错误!!!：' + error);\n\t});\n}"]}]}