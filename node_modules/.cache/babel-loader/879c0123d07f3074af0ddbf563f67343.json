{"remainingRequest":"F:\\work\\vuefityDemo\\node_modules\\thread-loader\\dist\\cjs.js!F:\\work\\vuefityDemo\\node_modules\\babel-loader\\lib\\index.js!F:\\work\\vuefityDemo\\node_modules\\eslint-loader\\index.js??ref--13-0!F:\\work\\vuefityDemo\\src\\plugins\\cryAes.js","dependencies":[{"path":"F:\\work\\vuefityDemo\\src\\plugins\\cryAes.js","mtime":1571144344000},{"path":"F:\\work\\vuefityDemo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\work\\vuefityDemo\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\work\\vuefityDemo\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\work\\vuefityDemo\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport CryptoJS from \"crypto-js\"; //秘钥\n\nvar CRYPTOJSKEY = \"6920D041374F2BC8\";\nexport default {\n  //加密\n\n  /*\n  * {param} plaintText 加密明文\n  * return  str 加密结果\n  */\n  encrypt: function encrypt(plaintText, cryptjskey) {\n    var plaintText = plaintText;\n    var options = {\n      mode: CryptoJS.mode.ECB,\n      padding: CryptoJS.pad.Pkcs7\n    };\n    var key = CryptoJS.enc.Utf8.parse(CRYPTOJSKEY);\n    var encryptedData = CryptoJS.AES.encrypt(plaintText, key, options);\n    var encryptedBase64Str = encryptedData.toString();\n    return encryptedBase64Str;\n  },\n  //解密\n\n  /*\n  * {param} plaintText 解密密文\n  \n  * return  str 解密结果\n  */\n  decrypt: function decrypt(encryptedBase64Str, cryptjskey) {\n    var encryptedBase64Str = encryptedBase64Str;\n    var options = {\n      mode: CryptoJS.mode.ECB,\n      padding: CryptoJS.pad.Pkcs7\n    };\n    var key = CryptoJS.enc.Utf8.parse(CRYPTOJSKEY); // 解密\n\n    var decryptedData = CryptoJS.AES.decrypt(encryptedBase64Str, key, options); // 解密后，需要按照Utf8的方式将明文转位字符串\n\n    var decryptedStr = decryptedData.toString(CryptoJS.enc.Utf8);\n    return decryptedStr;\n  }\n};",{"version":3,"sources":["F:\\work\\vuefityDemo\\src\\plugins\\cryAes.js"],"names":["CryptoJS","CRYPTOJSKEY","encrypt","plaintText","cryptjskey","options","mode","ECB","padding","pad","Pkcs7","key","enc","Utf8","parse","encryptedData","AES","encryptedBase64Str","toString","decrypt","decryptedData","decryptedStr"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,WAArB,C,CACC;;AACD,IAAMC,WAAW,GAAE,kBAAnB;AAEA,eAAe;AAEb;;AACA;;;;AAIAC,EAAAA,OAPa,mBAOLC,UAPK,EAOMC,UAPN,EAOkB;AAC7B,QAAID,UAAU,GAAGA,UAAjB;AACA,QAAIE,OAAO,GAAG;AACZC,MAAAA,IAAI,EAAEN,QAAQ,CAACM,IAAT,CAAcC,GADR;AAEZC,MAAAA,OAAO,EAAER,QAAQ,CAACS,GAAT,CAAaC;AAFV,KAAd;AAIA,QAAIC,GAAG,GAAGX,QAAQ,CAACY,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwBb,WAAxB,CAAV;AAEA,QAAIc,aAAa,GAAGf,QAAQ,CAACgB,GAAT,CAAad,OAAb,CAAqBC,UAArB,EAAiCQ,GAAjC,EAAsCN,OAAtC,CAApB;AACA,QAAIY,kBAAkB,GAAGF,aAAa,CAACG,QAAd,EAAzB;AACA,WAAOD,kBAAP;AACD,GAlBY;AAmBb;;AACA;;;;;AAKAE,EAAAA,OAzBa,mBAyBLF,kBAzBK,EAyBeb,UAzBf,EAyB2B;AAEtC,QAAIa,kBAAkB,GAAGA,kBAAzB;AACA,QAAIZ,OAAO,GAAG;AACZC,MAAAA,IAAI,EAAEN,QAAQ,CAACM,IAAT,CAAcC,GADR;AAEZC,MAAAA,OAAO,EAAER,QAAQ,CAACS,GAAT,CAAaC;AAFV,KAAd;AAIA,QAAIC,GAAG,GAAGX,QAAQ,CAACY,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwBb,WAAxB,CAAV,CAPsC,CAUtC;;AACA,QAAImB,aAAa,GAAGpB,QAAQ,CAACgB,GAAT,CAAaG,OAAb,CAAqBF,kBAArB,EAAyCN,GAAzC,EAA8CN,OAA9C,CAApB,CAXsC,CAYtC;;AACA,QAAIgB,YAAY,GAAGD,aAAa,CAACF,QAAd,CAAuBlB,QAAQ,CAACY,GAAT,CAAaC,IAApC,CAAnB;AACA,WAAOQ,YAAP;AACD;AAxCY,CAAf","sourcesContent":["import CryptoJS from \"crypto-js\";\n //秘钥\nconst CRYPTOJSKEY= \"6920D041374F2BC8\";\n \nexport default {\n  \n  //加密\n  /*\n  * {param} plaintText 加密明文\n  * return  str 加密结果\n  */\n  encrypt(plaintText,cryptjskey) {\n    var plaintText = plaintText;\n    var options = {\n      mode: CryptoJS.mode.ECB,\n      padding: CryptoJS.pad.Pkcs7\n    };\n    var key = CryptoJS.enc.Utf8.parse(CRYPTOJSKEY);\n\n    var encryptedData = CryptoJS.AES.encrypt(plaintText, key, options);\n    var encryptedBase64Str = encryptedData.toString();\n    return encryptedBase64Str;\n  },\n  //解密\n  /*\n  * {param} plaintText 解密密文\n  \n  * return  str 解密结果\n  */\n  decrypt(encryptedBase64Str, cryptjskey) {\n   \n    var encryptedBase64Str = encryptedBase64Str;\n    var options = {\n      mode: CryptoJS.mode.ECB,\n      padding: CryptoJS.pad.Pkcs7\n    };\n    var key = CryptoJS.enc.Utf8.parse(CRYPTOJSKEY);\n\n\n    // 解密\n    var decryptedData = CryptoJS.AES.decrypt(encryptedBase64Str, key, options);\n    // 解密后，需要按照Utf8的方式将明文转位字符串\n    var decryptedStr = decryptedData.toString(CryptoJS.enc.Utf8);\n    return decryptedStr;\n  }\n};\n"]}]}